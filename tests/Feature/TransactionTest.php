<?php

namespace Tests\Feature;

use App\PaymentProvider;
use App\Transaction;
use App\User;
use Faker\Factory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class TransactionTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Artisan::call('db:seed');
    }

    /**
     * @return void
     * @test
     */
    public function it_can_validate_the_transaction()
    {
        $transaction = factory(Transaction::class)->states('invalid')->make();

        $response = $this->post('/api/transactions', $transaction->toArray());
        $response->assertStatus(422)
            ->assertJsonStructure([
                'validation_messages' => [
                    'provider',
                    'user' => [
                        'email'
                    ]
                ]
            ]);
    }

    /**
     * @return void
     * @test
     */
    public function it_should_create_the_transaction()
    {
        $transaction = factory(Transaction::class)->make();

        $response = $this->post('/api/transactions', $transaction->toArray());
        $response->assertStatus(200)
            ->assertJsonStructure([
                'id',
                'provider',
                'type',
                'amount',
                'currency',
                'user',
            ]);
    }

    /**
     * @return void
     * @test
     */
    public function it_should_returns_correct_transaction_structure()
    {
        $this->generateTransactions(1);
        $transactionId = Transaction::first()->id;
        $response = $this->get('/api/transactions/' . $transactionId);
        $response->assertStatus(200)
            ->assertJson(['id' => $transactionId])
            ->assertJsonStructure([
                'id',
                'provider',
                'type',
                'amount',
                'status',
                'currency',
                'user',
            ]);
    }

    /**
     * @test
     */
    public function it_should_returns_filtered_transactions()
    {
        $this->generateTransactions(10);
        $failedCount = Transaction::where('status', 'failed')->count();

        $response = $this->get('/api/transactions?page=0&filters[status]=failed&limit=20');
        $collection = $response->json()['data'];
        $this->assertCount($failedCount, $collection);
        $response->assertStatus(200)
            ->assertJsonStructure([
                'pagination' => [
                    'limit',
                    'page',
                    'order'
                ],
                'data' => [
                    '*' => [
                        'id',
                        'provider',
                        'type',
                        'status',
                        'amount',
                        'currency',
                        'user',
                    ]
                ]
            ]);
    }


    /**
     * @test
     */
    public function it_should_returns_non_filtered_response()
    {
        $this->generateTransactions(10);
        $transactionsCount = Transaction::query()->count();
        $response = $this->get('/api/transactions?limit=10');
        $collection = $response->json()['data'];
        $this->assertCount($transactionsCount, $collection);
        $response->assertStatus(200)
            ->assertJsonStructure([
                'pagination' => [
                    'limit',
                    'page',
                    'order'
                ],
                'data' => [
                    '*' => [
                        'id',
                        'provider',
                        'type',
                        'amount',
                        'status',
                        'currency',
                        'user',
                    ]
                ]
            ]);
    }

    private function generateTransactions(int $count)
    {
        $faker = Factory::create();
        foreach (range(1, $count) as $index) {
            $transaction = new Transaction([
                "provider_id" => $faker->randomElement(\App\PaymentProvider::select('id')->get()->pluck('id')),
                "type" => $faker->randomElement(['deposit', 'withdraw']),
                "amount" => $faker->randomFloat(2, -1000000, 1000000),
                "currency" => $faker->currencyCode,
                "user_id" => factory(User::class)->create()->id,
                "status" => $faker->randomElement(Transaction::STATUSES)
            ]);;
            $transaction->save();
        }
    }
}
